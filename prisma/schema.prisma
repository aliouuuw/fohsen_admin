datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model User {
  id            Int            @id @default(autoincrement())
  email         String        @unique
  name          String?
  password      String        // Hashed password
  role          UserRole      @default(STUDENT)
  enrollments   Enrollment[]
  certificates  Certificate[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

model Formation {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  status        Status       @default(DRAFT)
  thumbnail     String?        // URL to image
  modules       Module[]
  enrollments   Enrollment[]
  certificates  Certificate[]
  passingGrade  Float         @default(70.0)  // Minimum grade to pass (percentage)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Module {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  order       Int          // Order in the formation
  level       Level        @default(BEGINNER)
  status      Status       @default(DRAFT)
  formation   Formation    @relation(fields: [formationId], references: [id])
  formationId Int
  courses     Course[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([formationId, order]) // Ensure unique order within formation
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Status {
  DRAFT
  PUBLISHED
}

model Course {
  id          Int           @id @default(autoincrement())
  title       String
  introduction String?
  objective   String?
  videoTitle  String?
  videoUrl    String?
  content     Json?        // Stores structured content (sections)
  order       Int          // Order in the module
  module      Module       @relation(fields: [moduleId], references: [id])
  moduleId    Int
  quiz        Quiz?
  resources   Resource[]
  progress    Progress[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([moduleId, order]) // Ensure unique order within module
}

model Quiz {
  id          Int           @id @default(autoincrement())
  question    String
  options     Json         // Array of options
  correctAnswers Json      // Array of correct answer indices
  course      Course       @relation(fields: [courseId], references: [id])
  courseId    Int          @unique // One quiz per course
  attempts    QuizAttempt[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Resource {
  id          Int           @id @default(autoincrement())
  title       String
  type        ResourceType
  url         String
  description String?
  course      Course       @relation(fields: [courseId], references: [id])
  courseId    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum ResourceType {
  PDF
  DOCUMENT
  LINK
  IMAGE
  VIDEO
}

model Enrollment {
  id          Int           @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  formation   Formation    @relation(fields: [formationId], references: [id])
  formationId Int
  progress    Progress[]
  startDate   DateTime     @default(now())
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([userId, formationId]) // User can enroll once per formation
}

model Progress {
  id          Int           @id @default(autoincrement())
  enrollment  Enrollment   @relation(fields: [enrollmentId], references: [id])
  enrollmentId Int
  course      Course       @relation(fields: [courseId], references: [id])
  courseId    Int
  completed   Boolean      @default(false)
  quizAttempts QuizAttempt[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([enrollmentId, courseId]) // One progress entry per course per enrollment
}

model QuizAttempt {
  id          Int           @id @default(autoincrement())
  quiz        Quiz         @relation(fields: [quizId], references: [id])
  quizId      Int
  progress    Progress     @relation(fields: [progressId], references: [id])
  progressId  Int
  answers     Json         // Array of selected answers
  score       Float        // Percentage score
  createdAt   DateTime     @default(now())
}

model Certificate {
  id          Int           @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  formation   Formation    @relation(fields: [formationId], references: [id])
  formationId Int
  issueDate   DateTime     @default(now())
  url         String?      // URL to certificate PDF
  
  @@unique([userId, formationId]) // One certificate per formation per user
}